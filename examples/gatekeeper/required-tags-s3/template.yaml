apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: awsrequiredtags
spec:
  crd:
    spec:
      names:
        kind: AwsRequiredTags
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            tags:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package awsrequiredtags
        import future.keywords.every
        
        violation[{"msg": msg}] {
          endswith(input.review.kind.group, "s3.aws.upbound.io")
          not startswith(input.review.kind.kind, "ProviderConfig")
          not input.review.object.spec.forProvider.tags
          msg := sprintf("Attempting to provision a resource without tags, the following tags are required '%v'", [input.parameters.tags])
        }

        violation[{"msg": msg}] {
            not has_owner_tag
            msg := sprintf("Attempting to provision a resource with the following tags '%v', one or more of the required tags '%v' is missing, and the 'owner' tag is not present", [input.review.object.spec.forProvider.tags, input.parameters.tags])
        }
        
        has_owner_tag {
            walk(input.review.object.spec.forProvider.tags, [path, value])
            path == ["owner"]
        }
